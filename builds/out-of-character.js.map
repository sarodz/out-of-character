{"version":3,"file":"out-of-character.js","sources":["../src/isEmoji.js","../src/match.js","../src/index.js"],"sourcesContent":["const isVariationSelector = (num) => num >= 65024 && num <= 65039\nconst isHighSurrogate = (num) => num >= 55296 && num <= 56319\nconst isLowSurrogate = (num) => num >= 56320 && num <= 57343\n\n// allow invisible characters in emojis\nconst isEmoji = function (text, i) {\n  // look at code before\n  if (text[i - 1]) {\n    let code = text.charCodeAt(i - 1)\n    if (isHighSurrogate(code) || isLowSurrogate(code) || isVariationSelector(code)) {\n      return true\n    }\n  }\n  // look at code before\n  if (text[i + 1]) {\n    let code = text.charCodeAt(i + 1)\n    if (isHighSurrogate(code) || isLowSurrogate(code) || isVariationSelector(code)) {\n      return true\n    }\n  }\n\n  return false\n}\nmodule.exports = isEmoji\n","const data = require('../data/characters.json')\nconst isEmoji = require('./isEmoji')\n\n/** add spaces at the end */\nconst padStr = function (str, width) {\n  while (str.length < width) {\n    str = '0' + str\n  }\n  return str\n}\n\n// for easier look-up\nconst byCode = data.reduce((h, obj) => {\n  h[obj.code] = obj\n  return h\n}, {})\n\n// chars to create our regex with\nlet codes = data\n  .filter((obj) => obj.replaceWith !== undefined)\n  .map((obj) => {\n    return obj.code.replace(/^U\\+/, '\\\\u')\n  })\n\n// return an array of found invisible characters\nconst findAll = function (text) {\n  const regEx = new RegExp(`(${codes.join('|')})`, 'g')\n  let matches = []\n  text.replace(regEx, (ch, _b, offset) => {\n    // find the code of the char we matched\n    let code = ch.charCodeAt(0)\n    let hex = code.toString(16).toUpperCase()\n    hex = `U+` + padStr(hex, 4)\n\n    let found = byCode[hex] || {}\n    // dont match for emoji zero-width chars\n    if (found.code === 'U+200D') {\n      // is this zero-width used in an emoji?\n      if (isEmoji(text, offset)) {\n        return ch //do nothing\n      }\n    }\n    matches.push({\n      name: found.name,\n      code: found.code,\n      offset: offset,\n      replacement: found.replaceWith || '',\n    })\n    return ch //do nothing\n  })\n  return matches\n}\nmodule.exports = findAll\n","const findAll = require('./match')\n\nmodule.exports = {\n  // find invisible or strange unicode characters in the text\n  detect: (text) => {\n    let matches = findAll(text)\n    if (matches.length > 0) {\n      return matches\n    }\n    return null\n  },\n  // remove invisible or strange unicode characters from the text\n  replace: (text) => {\n    let matches = findAll(text)\n    matches.forEach((o) => {\n      let code = o.code.replace(/^U\\+/, '\\\\u')\n      let reg = new RegExp(code, 'g')\n      text = text.replace(reg, o.replacement || '')\n    })\n    return text\n  },\n}\n"],"names":["isVariationSelector","num","isHighSurrogate","isLowSurrogate","isEmoji","text","i","code","charCodeAt","isEmoji_1","data","require$$0","require$$1","padStr","str","width","length","byCode","reduce","h","obj","codes","filter","replaceWith","undefined","map","replace","findAll","regEx","RegExp","concat","join","matches","ch","_b","offset","hex","toString","toUpperCase","found","push","name","replacement","match","src","detect","forEach","o","reg"],"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"}